#!/usr/bin/env python3
"""
Testar se a corre√ß√£o do erro bool funcionou
"""

import sys
import os
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from services.billing import can_use_model

# Simular chamada como √© feita no c√≥digo
client = None  # N√£o √© usado na fun√ß√£o atual
user_id = "test-user-123"
model_name = "claude-sonnet-4-20250514"

print("üß™ Testando fun√ß√£o can_use_model...")
print(f"   user_id: {user_id}")
print(f"   model_name: {model_name}")

try:
    # Chamar a fun√ß√£o
    result = can_use_model(client, user_id, model_name)
    
    print(f"\n‚úÖ Fun√ß√£o retornou com sucesso!")
    print(f"   Tipo do retorno: {type(result)}")
    print(f"   Valor retornado: {result}")
    
    # Tentar desempacotar como o c√≥digo faz
    can_use, model_message, allowed_models = result
    
    print(f"\nüìä Valores desempacotados:")
    print(f"   can_use: {can_use} (tipo: {type(can_use)})")
    print(f"   model_message: {model_message}")
    print(f"   allowed_models: {allowed_models}")
    
    # Verificar se o erro bool foi corrigido
    if isinstance(result, tuple) and len(result) == 3:
        print(f"\nüéâ SUCESSO! A fun√ß√£o est√° retornando uma tupla com 3 valores!")
        print(f"   O erro 'bool' object has no attribute 'get' foi CORRIGIDO!")
    else:
        print(f"\n‚ùå PROBLEMA: O retorno n√£o √© uma tupla com 3 valores")
        
except Exception as e:
    print(f"\n‚ùå ERRO ao executar teste: {e}")
    import traceback
    traceback.print_exc()

print("\n‚úÖ Teste conclu√≠do!")